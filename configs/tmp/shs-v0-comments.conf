
 ///////////////////////////////////////////////////////////////////////////
 // openSMILE configuration template file generated by SMILExtract binary //
 // you must manually adapt this file and change at least the             //
 // 'reader/writer.dmLevel =' lines.                                      //
 ///////////////////////////////////////////////////////////////////////////

 ;===== component manager configuration (= list of enabled components!) =====

[componentInstances:cComponentManager]
 // this line configures the default data memory:
instance[dataMemory].type = cDataMemory
instance[waveSource].type = cWaveSource
instance[framer].type = cFramer
instance[energy].type = cEnergy
instance[intensity].type = cIntensity
instance[pitchShs].type = cPitchShs
instance[csvSink].type = cCsvSink
 // Here you can control the amount of detail displayed for the data memory
  // level configuration. 0 is no information at all, 5 is maximum detail.
printLevelStats = 1
 // You can set the number of parallel threads (experimental):
nThreads = 4

// ============= component configuration sections begin here ==============


  ;;;; default (template) configuration section for component 'cWaveSource' ;;;;
[waveSource:cWaveSource]
writer.dmLevel = wave
filename = \cm[inputfile(I){test.wav}:name of input file]
properTimestamps = 0
;monoMixdown = 1
monoMixdown = 0
// segmentList[] = 
start = 0
end = -1
;The read end point in seconds from the END of file
endrel = 0
;don't read the RIFF header if 1, but you must specify manually .wav features
noHeader = 0
outFieldName = pcm
;basePeriod = -1 
;(optional) The base period of the input data (in seconds). The default -1.0 will force the code to use the value of period (unless overwritten by configureWriter().), -1.0);
;The buffer size for the output level in seconds (or buffersize in frames)
;buffersize_sec = 5.0


  ;;;; default (template) configuration section for component 'cFramer' ;;;;
[framer:cFramer]
reader.dmLevel = wave
writer.dmLevel = waveframe
;A string suffix to append to the input field names (default: empty)
// nameAppend = 
copyInputName = 1
EOIlevel = 0
;the last frame will be processed, even if it is not frameSize frames long.
allowLastFrameIncomplete = 0
frameMode = fixed
// frameListFile = 
// frameList = 
frameSize = 0.025
frameStep = 0.00625
;'left' = sample at the beginning of the frame (first frame from 0 to frameSize)
frameCenterSpecial = left
;1 = do not process incomplete windows at end of input
noPostEOIprocessing = 1
 

  ;;;; default (template) configuration section for component 'cEnergy' ;;;;
[energy:cEnergy]
reader.dmLevel = waveframe
writer.dmLevel = energy
nameAppend = energy
copyInputName = 1
EOIlevel = 0
processArrayFields = 0
includeSingleElementFields = 0
preserveFieldNames = 1
;enable htk compatible log-energy output (this will output log-energy ONLY! no rms energy...)
htkcompatible = 0
rms = 1
;output of quadratic energy (sum of all x[n]^2  divided by N
energy2 = 0
;output logarithmis energy (log-energy). E = log( sum (x[n]*x[n]/N )
log = 1
;scale factor to multiply log energy by
escaleLog = 1
escaleRms = 1
escaleSquare = 1
ebiasLog = 0
;bias to add to rms energy
ebiasRms = 0
ebiasSquare = 0
 

  ;;;; default (template) configuration section for component 'cIntensity' ;;;;
[intensity:cIntensity]
reader.dmLevel = <<XXXX>>
writer.dmLevel = <<XXXX>>
// nameAppend = 
copyInputName = 1
EOIlevel = 0
processArrayFields = 1
includeSingleElementFields = 0
preserveFieldNames = 1
;1 = enable the output of intensity I (mean of squared input values multiplied by a Hamming window)
intensity = 1
;HUMAN HEARING 1 = enable the output of loudness L : L = (I/I0)^0.3 ; I0 = 0.000001 (for sample values normalised to the range -1..1)
loudness = 1
 

  ;;;; default (template) configuration section for component 'cPitchShs' ;;;;
[pitchShs:cPitchShs]
reader.dmLevel = <<XXXX>>
writer.dmLevel = <<XXXX>>
// nameAppend = 
copyInputName = 1
EOIlevel = 0
processArrayFields = 0
includeSingleElementFields = 0
preserveFieldNames = 1
;Maximum detectable pitch in Hz
maxPitch = 620
minPitch = 52
;The number of F0 candidates to output [1-20] (0 disables ouput of candidates AND their voicing probs
nCandidates = 3
;output of F0 candidates scores
scores = 1
;output of voicing probability for F0 candidate
voicing = 1
;output of raw best F0 candidate without thresholding in unvoiced segments
F0C1 = 0
;output of output voicing (pseudo) probability for best candidate
voicingC1 = 0
;output of raw F0 (best candidate), > 0 only for voiced segments (using voicingCutoff threshold)
F0raw = 0
voicingClip = 0
;above will be considered ass voicing
voicingCutoff = 0.700000
inputFieldSearch = Mag_logScale
octaveCorrection = 0
shsWriter.dmLevel = ___shs__dummy__
// shsWriter.levelconf.name = 
shsWriter.levelconf.type = float
shsWriter.levelconf.isRb = 1
shsWriter.levelconf.T = 0
shsWriter.levelconf.lenSec = 0
shsWriter.levelconf.frameSizeSec = 0
shsWriter.levelconf.growDyn = 0
shsWriter.levelconf.noHang = 1
;to consider for subharmonic sample
nHarmonics = 15
compressionFactor = 0.850000
greedyPeakAlgo = 0
;If set to 1, then the sub-harmonic summation spectra frames will be written to the level specified by shsWriter.dmLevel.
shsSpectrumOutput = 0
;0 = remove low frequency information up to given frequency from input spectrum by zeroing all bins below
lfCut = 0
 

  ;;;; default (template) configuration section for component 'cCsvSink' ;;;;
[csvSink:cCsvSink]
reader.dmLevel = <<XXXX>>
errorOnNoOutput = 0
filename = smileoutput.csv
delimChar = ;
append = 0
timestamp = 1
frameTime = 1
number = 1
frameIndex = 1
printHeader = 1
flush = 0
// instanceBase = 
// instanceName = 
 

// ################### END OF openSMILE CONFIG FILE ######################

